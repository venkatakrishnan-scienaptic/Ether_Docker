server {
      listen     80 default_server;
      listen  [::]:80;
      #root     /usr/local/openresty/nginx/html;
      
      resolver 127.0.0.11 valid=1s ipv6=off;
      
      set $session_cookie_samesite off;

    #ssl_certificate /opt/nginx/ssl/omnihpi019.auth.hpicorp.net.crt;
    #ssl_certificate_key /opt/nginx/ssl/omnihpi019unen.auth.hpicorp.net.key;

    set $session_cipher none;                 # don't need to encrypt the session content, it's an opaque identifier
    #set $session_storage shm;                 # use shared memory
    set $session_cookie_persistent on;        # persist cookie between browser sessions
    set $session_cookie_renew      3600;      # new cookie every hour
    set $session_cookie_lifetime   86400;     # lifetime for persistent cookies
    set $session_name              sess_auth; # name of the cookie to store the session identifier in

    set $session_shm_store         sessions;  # name of the dict to store sessions in
    set $session_shm_uselocking    off;
    set $session_shm_lock_exptime  3;
    set $session_shm_lock_timeout  2;
    set $session_shm_lock_step     0.001;
    set $session_shm_lock_ratio    1;
    set $session_shm_lock_max_step 0.5;


    access_by_lua '
      local http = require("resty.http").new()
        local res, err = http:request_uri("http://127.0.0.1:3333/", {ssl_verify = false})
        -- redirect_uri_path = "/redirect_uri",
        local opts = {
          redirect_uri_path = "/redirect_uri",
          accept_none_alg = true,
          discovery = "http://127.0.0.1:3333/auth/realms/NGINX/.well-known/openid-configuration",
          client_id = "ether2",
          client_secret = "oL4y9aMkelXLQ3nQurTakg8OuxDkNfOj",
          redirect_uri_scheme = "http",
          logout_path = "/logout",
          --scope = "group",
          -- Scopes to request; group contains group memberships, offline_access gives us a refresh token
          redirect_after_logout_uri = "http://127.0.0.1:3333/auth/realms/NGINX/protocol/openid-connect/logout?redirect_uri=http://127.0.0.1",
          renew_access_token_on_expiry = true,
          redirect_after_logout_with_id_token_hint = false,
          session_contents = {id_token=true}
        }
        -- call introspect for OAuth 2.0 Bearer Access Token validation
        local res, err = require("resty.openidc").authenticate(opts)
        if err then
          ngx.status = 403
          ngx.say(err)
          ngx.exit(ngx.HTTP_FORBIDDEN)
        end
        -- set data from the ID token as HTTP Request headers
        -- ngx.req.set_header("X-Auth-Audience", res.id_token.aud)
        ngx.req.set_header("X-Auth-Email", res.id_token.email)
        ngx.req.set_header("X-Auth-ExpiresIn", res.id_token.exp)
        ngx.req.set_header("X-Auth-Groups", res.id_token.groups)
        ngx.req.set_header("X-Auth-Name", res.id_token.name)
        -- ngx.req.set_header("X-Auth-Subject", res.id_token.sub)
        -- ngx.req.set_header("X-Auth-Userid", res.id_token.preferred_username)
        ngx.req.set_header("X-Auth-Username", res.id_token.preferred_username)
        ngx.req.set_header("X-Auth-Locale", res.id_token.locale)
        -- ngx.req.set_header("X-Auth-Token", res.access_token)
      ';

      # I disabled caching so the browser won't cache the site.
      #expires           0;
      #add_header        Cache-Control private;
      location / {
                        # kill cache
                        add_header Last-Modified $date_gmt;
                        add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
                        if_modified_since off;
                        expires off;
                        etag off;

            proxy_pass          http://ether:9000/;
            proxy_set_header    Host               $host;
            proxy_set_header    X-Real-IP          $remote_addr;
            proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Host   $host;
            proxy_set_header    X-Forwarded-Server $host;
            proxy_set_header    X-Forwarded-Port   $server_port;
            proxy_set_header    X-Forwarded-Proto  $scheme;
            proxy_set_header    Authorization   $http_authorization;
            proxy_set_header    X-NginX-Proxy      true;
            proxy_headers_hash_max_size 512;
            proxy_headers_hash_bucket_size 128;

                        # don't cache it
                        proxy_no_cache 1;
                        # even if cached, don't try to use it
                        proxy_cache_bypass 1;

        }
      location /check {
        default_type 'text/plain';
        content_by_lua_block {
            ngx.say('Hello,venkatakrishnan')
        }
      }


      
      # redirect server error pages to the static page /40x.html
      #
      error_page 404 /404.html;
          location = /40x.html {
      }
      # redirect server error pages to the static page /50x.html
      #
      error_page 500 502 503 504 /50x.html;
          location = /50x.html {
      }
}